use serde_yaml;
use sha2::{Digest, Sha256};
use std::collections::HashSet;
use std::io::{self, prelude::*};

use crate::storage::{Digle, Storage};

mod change;
pub use self::change::{Change, Changes};

// This is just a wrapper around some instance of io::Write that calculates a hash of everything
// that's written.
struct HashingWriter<W: Write> {
    writer: W,
    hasher: Sha256,
}

impl<W: Write> HashingWriter<W> {
    fn new(writer: W) -> HashingWriter<W> {
        HashingWriter {
            writer: writer,
            hasher: Default::default(),
        }
    }
}

impl<W: Write> Write for HashingWriter<W> {
    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
        self.hasher.input(buf);
        self.writer.write(buf)
    }

    fn flush(&mut self) -> io::Result<()> {
        self.writer.flush()
    }
}

#[derive(Clone, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize)]
pub struct PatchId {
    data: [u8; 32],
}

impl PatchId {
    pub fn cur() -> PatchId {
        PatchId { data: [0; 32] }
    }

    pub fn is_cur(&self) -> bool {
        self.data == [0; 32]
    }

    pub fn filename(&self) -> String {
        // We encode the filename in the URL_SAFE encoding because it needs to be a valid path
        // (e.g. no slashes).
        base64::encode_config(&self.data[..], base64::URL_SAFE)
    }
}

/// A patch is ultimately identified by its id, which is generated by hashing the contents of the
/// serialized patch. This ends up being a bit circular, because the contents of the patch might
/// actually depend on the id, and those contents in turn will affect the id. The way we break this
/// cycle is by separating "unidentified" patches (those without an id yet) from completed patches
/// with an id.
///
/// This is an unidentified patch; it does not have an id field, and any changes in the `changes`
/// array that need to refer to this patch use the all-zeros placeholder as their patch id.
///
/// This patch *cannot* be applied to a repository, because doing so would require an id. However,
/// it can be serialized to a file, and it can be turned into an identified patch.
#[derive(Clone, Debug, Eq, Hash, PartialEq, Serialize)]
pub struct UnidentifiedPatch {
    pub header: PatchHeader,
    pub changes: Changes,
    pub deps: Vec<PatchId>,
}

impl UnidentifiedPatch {
    pub fn new(author: String, description: String, changes: Changes) -> UnidentifiedPatch {
        // The dependencies of this patch consist of all patches that are referred to by the list
        // of changes.
        let mut deps = HashSet::new();
        for c in &changes.changes {
            match *c {
                Change::DeleteNode { ref id } => {
                    if !id.patch.is_cur() {
                        deps.insert(id.patch.clone());
                    }
                }
                Change::NewEdge { ref src, ref dst } => {
                    if !src.patch.is_cur() {
                        deps.insert(src.patch.clone());
                    }
                    if !dst.patch.is_cur() {
                        deps.insert(dst.patch.clone());
                    }
                }
                _ => {}
            }
        }

        UnidentifiedPatch {
            header: PatchHeader { author, description },
            changes,
            deps: deps.into_iter().collect(),
        }
    }

    pub fn write_out<W: Write>(
        self,
        writer: W,
    ) -> Result<Patch, serde_yaml::Error> {
        let mut w = HashingWriter::new(writer);
        serde_yaml::to_writer(&mut w, &self)?;

        let id = w.hasher.result();
        let mut patch_id = PatchId::cur();
        patch_id.data.copy_from_slice(&id[..]);
        let mut ret = Patch {
            id: patch_id,
            header: self.header,
            changes: self.changes,
            deps: self.deps,
        };

        for change in &mut ret.changes.changes {
            change.set_patch_id(&ret.id);
        }
        Ok(ret)
    }
}

#[derive(Clone, Debug, Deserialize, Eq, Hash, PartialEq)]
pub struct Patch {
    pub id: PatchId,
    pub header: PatchHeader,
    pub changes: Changes,
    pub deps: Vec<PatchId>,
}

impl Patch {
    pub fn store_new_contents(&self, storage: &mut Storage) {
        for change in &self.changes.changes {
            change.store_new_contents(storage);
        }
    }

    pub fn apply_to_digle(&self, digle: &mut Digle) {
        for change in &self.changes.changes {
            change.apply_to_digle(digle);
        }
    }
}

#[derive(Clone, Debug, Deserialize, Eq, Hash, PartialEq, Serialize)]
pub struct PatchHeader {
    pub author: String,
    pub description: String,
}


